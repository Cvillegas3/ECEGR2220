.data
a: .word 0     
b: .word 0     
c: .word 0     
i: .word 5     
j: .word 10    

.text
main:
lw t0, i       # Load the value of 'i' into register t0.
lw t1, j       # Load the value of 'j' into register t1.
addi sp, sp, -8    # Allocate space on the stack for two values.
sw t0, 4(sp)   # Store the value of 'i' on the stack.
sw t1, 0(sp)   # Store the value of 'j' on the stack.
add a0, zero, t0   # Move the value of 'i' from register t0 to a0 (argument register).
jal additup    # Call the 'AddItUp' function with argument 'i'.
sw t1, a, s0   # Store the return value of the 'AddItUp' function in memory location 'a'.
lw t1, 0(sp)   # Load the value of 'j' from the stack into register t1.
add a0, zero, t1   # Move the value of 'j' from register t1 to a0 (argument register).
jal additup    # Call the 'AddItUp' function with argument 'j'.
sw t1, b, s0   # Store the return value of the 'AddItUp' function in memory location 'b'.
addi sp, sp, 8    # Deallocate the space on the stack used for 'i' and 'j'.
lw t0, a       # Load the value of 'a' from memory location 'a' into register t0.
lw t1, b       # Load the value of 'b' from memory location 'b' into register t1.
add t2, t0, t1    # Add the values in registers t0 and t1 and store the result in t2.
sw t2, c, s0   # Store the result of the addition in memory location 'c'.
li a7, 10      # Load the system call number for exit into register a7.
ecall         # Call the system call to exit the program.

additup:
add t0, zero, zero   # Initialize register t0 to 0.
add t1, zero, zero   # Initialize register t1 to 0.

for:
slt t6, t0, a0   # Compare the value in register t0 to the value in a0 (function argument).
beq t6, zero, exit  # If the value in t0 is greater than or equal to a0, exit the loop.
addi t2, t0, 1   # Increment the value of t0 by 1 and store the result in t2.
add t1, t1, t2   # Add the value in t2 to the current value of t1 and store the result in t1.
addi t0, t0, 1   # Increment the value of t0 by 1.
j for          # Jump back to the beginning of the loop.

exit:
ret 
